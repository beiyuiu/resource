1、CSS Hack
	1、解决问题 
		浏览器兼容性的问题
		针对不同的浏览器编写不同的CSS代码
	2、CSSHack的原理
		使用CSS样式的优先级来解决兼容性问题的
	3、CSSHack的实现方式
		1、CSS类内部Hack
			在样式属性名称前或属性值后增加前后缀，以便去识别不同的浏览器
			+ ： IE6,7的前缀
			- ： IE6的前缀
			\0 ：IE8，9，10
			\9\0：IE9，10
		2、CSS选择器Hack
			在选择器前增加前缀以便识别不同的浏览器
			*前缀：识别IE6
			*+前缀：识别IE7

			*div{ IE6中div显示效果 }
			*+div{ IE7中div显示效果 }
		3、HTML头部引用Hack
			使用IE条件注释来判断IE浏览器的版本，从而去执行不同的代码
			语法：
			<!--[if 条件 IE 版本号]>
				满足条件要执行的HTML代码
			<![endif]-->
				版本号：6-10
				条件：
					1、gt
						只有在大于指定版本的浏览器中执行指定代码
					2、lt
						只有在小于指定版本的浏览器中执行指定代码
					3、gte 
						greater than and equal
						只有在大于等于指定版本的浏览器中执行指定代码
					4、lte
						less than and equal
						只有在小于等于指定版本的浏览器中执行指定代码
					5、!
						在条件版本以外的浏览器中执行指定的代码
2、转换
	1、什么是转换
		改变元素在页面中的位置，大小，角度以及形状的一种方式
		2D转换 ：只在x轴，y轴，平面上发生转换效果
		3D转换 ：增加在 z轴上的转换效果
	2、转换属性
		转换属性：
			属性：transform
			取值：
				1、none ：默认值，即无任何转换效果
				2、transform-function
					表示的是1个或多个转换函数，如果是多个转换函数(效果)的话，中间用 空格 隔开
		转换原点：
			属性：transform-origin
			取值：数值 / 百分比 / 关键字
				2个值：原点在x轴 和 y轴的位置
				3个值：原点在x，y，z轴上的位置
	3、2D转换
		1、位移
			1、什么是位移
				改变元素在页面中的位置
			2、语法
				属性：transform
				取值：
					1、translate(x)
						指定元素在x轴上的偏移距离
						取值为正，元素右移
						取值为负，元素左移
					2、translate(x,y)
						x ：同上
						y ：指定元素在y轴上的偏移距离
							取值为正，元素下移
							取值为负，元素上移
					3、translateX(x)
					4、translateY(y)
		2、缩放
			1、什么是缩放
				改变元素在页面中的尺寸(按比例)
			2、语法
				属性：transform
				取值：
					1、scale(value)
						value : 横向 和 纵向的缩放比例
					2、scale(x,y)
						x : 横向的缩放比例
						y : 纵向的缩放比例
					3、单向缩放函数
						scaleX(x)
						scaleY(y)

				缩放比例：
					默认值为 1
					缩小：0-1之间的数字
					放大：大于1的数字
		3、旋转
			1、什么是旋转
				改变元素在页面上的角度
			2、语法
				属性：transform
				取值：
					rotate(ndeg);
						n取值为正，顺时针旋转
						n取值为负，逆时针旋转
			3、注意
				1、转换原点会影响最后的转换效果
					练习：
						1、将转换原点更改为元素的左上角
						2、再将元素旋转45deg，观看效果
				2、旋转是连同坐标轴都一同旋转的，会影响旋转后的位移效果
					练习：
						1、将d2元素先旋转45deg，再向右位移50px
						2、将d2元素先向右位移50px，再旋转45deg
		4、倾斜
			1、什么是倾斜
				改变元素在页面中的形状
			2、语法
				属性：transform
				取值：
					1、skewX(xdeg)
						让元素向着x轴的方向产生倾斜效果，实际上是改变y轴的倾斜角度值
						x 取值为正，y轴逆时针倾斜
						x 取值为负，y轴顺时针倾斜
					2、skewY(ydeg)
						让元素向着y轴的方向产生倾斜效果，实际上是改变x轴的倾斜角度制
						y 取值为正，x轴顺时针倾斜
						y 取值为负，x轴逆时针倾斜
					3、skew(x)
						等同于 skewX()
					4、skew(x,y)

					练习：
						1、页面中创建一个元素200*200的，增加边框或背景
						2、鼠标悬停的时候，该元素向右偏移200px，向下偏移200px，旋转135deg，向x轴倾斜45deg，同时放大1.1倍
	4、3D转换
		1、透视距离
			模拟人眼到3d转换元素之间的距离
			属性：perspective
			注意：该属性要加在3d转换元素的父元素上。
		2、3D旋转
			属性：transform
			取值：
				1、rotateX(xdeg)
					沿x轴旋转的角度
				2、rotateY(ydeg)
					沿y轴旋转的角度
				3、rotateZ(zdeg)
					沿z轴旋转的角度
				4、rotate3d(x,y,z,ndeg)
					x,y,z 取值为大于0的数字时，则表示该轴要参与到旋转中来，如果取值为0，该轴则不参与旋转
					练习：
						使用rotate3d，x,y,z同时旋转
3、过渡
	1、什么是过渡
		将CSS的属性值在一段时间内平缓变化的过程给体现出来
	2、过渡的语法 - 4属性
		1、指定过渡属性
			作用：指定哪个属性值，在变化时需要使用过渡效果来体现
			属性：transition-property
			取值：使用过渡效果的属性名称
			ex:
				transition-property:background;
			注意：
				允许设置过渡效果的属性如下：
					1、颜色属性
					2、取值为数字的属性
					3、转换属性 : transform
					4、渐变属性
					5、阴影属性
					6、visibility属性
		2、指定过渡时长
			作用：指定在多长时间内完成过渡的操作
			属性：transition-duration
			取值：以 s 或 ms 为单位的数值
				1000ms = 1s
		3、指定过渡速度时间函数
			属性：transition-timing-function
			取值：
				1、ease ：默认值，慢速开始，快速变快，慢速结束
				2、linear ：匀速
				3、ease-in ：慢速开始，加速结束
				4、ease-out ：快速开始，慢速结束
				5、ease-in-out : 慢速开始和结束，中间先加速后减速
		4、指定过渡延迟时间
			属性：transition-delay
			取值：以 s 或 ms 为单位的数值
	3、过渡的编写位置
		1、允许将过渡属性编写在元素声明的样式中
		2、允许将过渡属性编写在触发过渡效果样式中(hover)
	4、过渡的简介写法
		transition:property duration timing-function delay;

		transition:all .5s linear;
		练习：
			1、在页面中创建1个 100*100的元素
			2、鼠标悬停时，5秒钟之内，向右偏移500px的同时再旋转3圈
			3、鼠标移出去的时候，还能滚回来
4、动画
	1、什么是动画
		使元素从一种样式逐渐变化为另一种样式
		动画是复杂的过渡效果

		动画是通过 "关键帧" ， 来控制动画的每一步
		关键帧：
			1、动画执行的时间点
			2、在该时间点上元素的样式
	2、动画的使用步骤
		1、声明动画
		2、为元素调用动画
	3、声明动画
		@keyframes 动画名称{
			/*定义该动画中所有的关键帧*/

			0%{
				/*动画开始时的样式*/
			}

			25%{
				/*动画执行到 1/4 的时候的样式*/
			}

			50%{
				/*动画执行到 1/2 的时候的样式*/
			}

			100%{
				/*动画结束时的样式*/
			}
		}

		兼容性
		@-moz-keyframes 动画名称{
			/*定义该动画中所有的关键帧*/

			0%{
				/*动画开始时的样式*/
			}

			25%{
				/*动画执行到 1/4 的时候的样式*/
			}

			50%{
				/*动画执行到 1/2 的时候的样式*/
			}

			100%{
				/*动画结束时的样式*/
			}
		}
		
		@-webkit-keyframes 动画名称{
			/*定义该动画中所有的关键帧*/

			0%{
				/*动画开始时的样式*/
			}

			25%{
				/*动画执行到 1/4 的时候的样式*/
			}

			50%{
				/*动画执行到 1/2 的时候的样式*/
			}

			100%{
				/*动画结束时的样式*/
			}
		}

		@-o-keyframes 动画名称{
			/*定义该动画中所有的关键帧*/

			0%{
				/*动画开始时的样式*/
			}

			25%{
				/*动画执行到 1/4 的时候的样式*/
			}

			50%{
				/*动画执行到 1/2 的时候的样式*/
			}

			100%{
				/*动画结束时的样式*/
			}
		}

		@-ms-keyframes 动画名称{
			/*定义该动画中所有的关键帧*/

			0%{
				/*动画开始时的样式*/
			}

			25%{
				/*动画执行到 1/4 的时候的样式*/
			}

			50%{
				/*动画执行到 1/2 的时候的样式*/
			}

			100%{
				/*动画结束时的样式*/
			}
		}
	4、动画属性
		1、animation-name
			作用：指定调用动画的名称
		2、animation-duration
			作用：指定动画执行一个周期的时长
			取值：以 s 或 ms 为单位的数值
		3、animation-timing-function
			作用：指定动画的速度时间函数
			取值：ease,linear,ease-in,ease-out,ease-in-out
		4、animation-delay
			作用：指定动画的延迟时长
			取值：以 s 或 ms 为单位的数值
		5、animation-iteration-count
			作用：指定动画的播放次数
			取值：
				1、具体数值
				2、infinite ：无限次
		6、animation-direction
			作用：指定动画的播放方向
			取值：
				1、normal ：正常播放
				2、alternate ：轮流播放
					奇数次数播放时，正向播放(0%~100%)
					偶数次数播放时，逆向播放(100%~0%)
		7、动画的简介写法
			animation:name duration timing-function delay iteration-count direction;
		8、animation-fill-mode
			作用：规定动画在播放前或播放后的状态
			取值：
				1、none ：不改变默认行为
				2、forwards ：当动画完成后，保持在最后一个帧的状态上
				3、backwards ：在动画播放前，延迟时间内，动画将保持在第一个帧的状态上
				4、both
					forwards 和 backwards 的结合体
		9、animation-play-state
			作用：指定动画的播放状态
			取值：
				1、paused : 动画暂停
				2、running : 动画播放



	5、动画的调用时机
		1、在 :hover 时调用动画
			只有在鼠标悬停在元素上时，执行动画
		2、在元素声明的样式中，直接调用动画
			网页加载时，就执行动画
		
		练习：
			在网页加载时，调用 scroll 动画，执行一个周期的时长是3s，匀速执行，并且反复执行













