1、运算符
	1、位运算符
		1、作用
			将数字转换为二进制后进行运算
			只做整数运算，如果是小数的话，则去掉小数位再运算
		2、位运算
			1、按位 与 ：&
				语法 ：a & b
				特点 ：将 a 和 b 先转换为二进制，按位比较，对应位置的数字都为1的话，那么该位的整体结果为1，否则就为0
				ex：5 & 3
					5 ：101
					3 ：011
					===========
					    001
							结果 ：1
				使用场合：任意数字与1做按位与操作，可以判断奇偶性，结果为1，则为奇数，否则为偶数
				0 ：0
				1 ：1
				2 ：10
				3 ：11
				4 ：100
				5 ：101

				5 & 1
				101
				001
				==========
				001

				4 & 1
				100
				001
				====
				000
			2、按位 或 ：|
				语法 ：a | b
				特点 ：将 a 和 b 转换为 二进制，按位比较，对应位置的数字，至少有一位为1的话，那么该为的整体结果就为1，否则为 0
				ex :
					5 | 3
					101
					011
					========
					111 结果为 ：7
				适用场合：任何小数与0 做 按位或的操作，可以快速转换为整数(并非四舍五入)
				5 | 0
				101
				000
				====
				101
			3、按位 异或 ：^
				语法：a ^ b
				特点：将 a 和 b 先转换为二进制，按位操作，对应位置上的两个数字，相同时，该位整体结果为0，不同时，该位的整体结果为 1
				使用场合：快速交换两个数字
				5 ^ 3
				101
				011
				==========
				110 结果为 6

				练习：
					var a = 5;
					var b = 3;

					a = a ^ b;
					b = b ^ a;
					a = a ^ b;
					console.log(a,b);
		3、赋值 和 扩展赋值运算符
			1、赋值运算符 ：=
			2、扩展赋值运算符
				+=，-=，*=，/=，^=，... ...
				a += b; ==> a = a + b;

				a = a + 1; ==> a += 1; ==> a++ ; ==> ++a
			3、练习
				1、从弹框中，分两次输入两个数字，分别保存在 a 和 b中
				2、如果 a 大于 b的话 ，则交换两个数字的位置
					使用 短路&&,扩展赋值运算符,位运算

		4、条件运算符(三目运算)
			单目(一元)运算符 ：++,--,!
			双目(二元)运算符 ：+，-，*，/，%，>,<, ... ...
			三目(三元)运算符 ：?:

			1、语法
				条件?表达式1:表达式2;

				条件是一个boolean类型的数据，如果条件结果为true，则执行表达式1的内容，并将表达式1的结果作为整体表达式的结果。如果条件为false，则执行表达式2的内容，并将表达式2的结果作为整体表达式的结果
				ex:
					var age = 28;
					var msg = age >= 18 ? "你已成年" : "你未成年";
				练习：
					从弹框中录入一个数字表示考试成绩(score)
					如果 成绩为 100 分 ，提示 ：满分
					如果 成绩 >= 90 分 ，提示 ：优
					如果 成绩 >= 80 分 ，提示 ：良
					如果 成绩 >= 60 分 ，提示 ：及格
					否则 ：提示 不及格
2、函数
	1、什么是函数
		函数(function),是一段预定义好，并且可以被反复使用的代码块
			预定义好 ：事先声明，但不是马上执行
			反复使用 ：可以被多次调用
			代码块 ：包含多条可执行的语句
	2、函数的声明与调用
		1、普通函数
			语法：
				function 函数名(){
					语句块;
				}

				调用：在JS中任何的合法位置处，都可以通过 函数名() 的方式进行调用
			
			练习：
				1、声明一个函数，名称为 change
				2、在函数中
					1、通过弹框,分两次，录入两个数字，保存在 a 和 b
					2、先打印 a 和 b的值
					3、如果 a > b 的话，则交换两个数字的位置
					4、再打印 a 和 b的值
				3、在网页中，创建一个按钮，点击按钮时，完成 change 函数的调用 

		2、带参函数
			1、定义语法：
				function 函数名(参数列表){
					语句块;
				}

				参数列表：
					可以由0或多个参数的名称来组成，多个参数的话中间用 , 隔开
				定义函数时的参数列表，都称为 "形参(形式参数)"

			2、调用语法
				任意合法JS位置处
				函数名(参数列表);
				调用函数时，所传递的参数列表，称之为"实参(实际参数)"
			3、练习
				1、定义一个函数 change ，该函数中接收两个参数(a,b)
				2、在函数体中，如果 a 大于 b的话，则交换两个数字的位置，再打印输出结果
				3、通过一个按钮调用函数，并且将 两个数字传递给函数
			4、常用带参函数
				parseInt(变量);
				parseFloat(变量);
				Number(变量)
				console.log("");
		3、带返回值的函数
			var result = parseInt("35.5");
			1、什么是返回值
				由函数体内 带到 函数体外的数据，叫做"返回值"
			2、语法
				function 函数名(参数列表){
					语句块;
					return 值;
				}

				允许通过一个变量来接收调用函数后的返回值
				var 变量名 = 函数名(实参列表);
			3、练习
				定义一个可以接收三个Number参数的方法(名称为getMax)，在该方法中，计算并返回 最大的数值
	3、作用域
		1、什么事作用域
			指的是变量和函数的可访问范围，作用域分为以下两类
			1、函数作用域
				只在定义的函数内允许访问变量 和 函数
			2、全局作用域
				一经定义，在任何位置处都能访问
		2、函数作用域中的变量
			在某个函数中声明的变量，就是函数作用域中的变量，也可以称之为 "局部变量"。
			function calSum(){
				var a = 3;
				var b = 5;
				console.log(a,b); // 输出 3 5
			}
			console.log(a,b); //错误，因为 a ，b已经出了它的定义范围

			练习：
				1、定义一个 函数calSum，声明两个变量a，b，并赋值，并且在函数内打印两个变量
				2、定义一个 函数calMax，直接打印输出 a，b，观察结果
		3、全局作用域中的变量
			一经声明了，任何位置都能使用。也称为 "全局变量"
			声明方式：
			1、将变量声明在最外层，所有的function之外
				<script>
					var a = 15;
					var b = 18;

					function showMsg(){
						console.log(a);
						console.log(b);
					}
				</script>
			2、声明变量时，不使用var关键字，一律是全局变量，但有风险

			建议：
				全局变量 ，尽量都声明在 所有的 function 之外
				声明变量时，也一律都使用 var 关键字
		4、声明提前
			Q ：
				function show(){
					console.log(num);//报错 
				}
			1、什么是声明提前
				JS程序在正式执行前，会将所有var声明的变量以及function声明的函数，预读到所在作用域的顶端。但赋值还保留在原位置上
			2、建议
				最好将变量的声明 和 函数的声明都集中到所在作用域的最顶端
		5、按值传递
			Q :
				function change(a,b){
					a ^= b;
					b ^= a;
					a ^= b;

					console.log("在change函数中");
					console.log(a,b);
				}
				function testChange(){
					var a = 15;
					var b = 18;
					console.log("调用前：");
					console.log(a,b);//15 18
					change(a,b);
					console.log("调用后：");
					console.log(a,b);//15 18
				}
			1、什么是按值传递
				基本数据类型的数字在做参数传递时，实际上时传递的实参的副本到函数中，原始数据并未发生过改变

			2、建议
				基本数据类型的数据在做参数传递时，尽量不要在函数中修改，因为即便修改，也不会影响原数据的
		6、局部函数
			将函数 再声明在某个函数内，就是局部函数
			<script>
				function show(){
					
					function inner(){
						console.log("show 中的 inner 函数");
					}

					inner();//正确

				}

				inner(); // 错误，inner 是局部函数，只能在 show中被调用
			</script>
		7、全局函数
			ECMAScript预定义的全局函数,可供用户直接使用
			1、paseInt();
			2、parseFloat();
			3、Number();
			4、isNaN();
			5、encodeURI()
				URL:Uniform Resource Locator ：统一资源定位符/器
				URI:Uniform Resource Identifier : 统一资源标识符
				1、作用
					对统一资源标识符格式的字符串进行编码，并返回编码后的字符串
					编码：将多字节的字符，编译成多个单字节的字符
			6、decodeURI()
				1、作用
					对已编码的URI进行解码(将已编码内容再转换回中文)
			7、encodeURIComponent()
				在 encodeURI 基础之上，允许将 特殊符号(:,/,...) 进行编码
			8、decodeURIComponent()
			9、eval()
				作用：计算并执行以字符串方式表示的JS代码
				var msg = "console.log('Hello World');";
				eval(msg);//将 msg 作为 JS代码去执行

				练习：
					1、创建页面，通过弹框，输入一段JS代码
					2、通过 eval() ，将输入的JS代码执行一次
3、递归调用
	1、什么是递归
		递归指的是在一个函数中，又一次的调用了自己
	2、递归的实现
		1、边界条件
		2、递归前进 - 继续调自己
		3、递归返回 - 向上返回数据
	3、解决问题
		1、计算某个数字的阶乘
			5的阶乘
				5!=5*4*3*2*1

				5! = 5 * 4!
				4! = 4 * 3!
				3! = 3 * 2!
				2! = 2 * 1!
				1! = 1

			/*计算 n 的阶乘*/
			function f(n){
				... ...
			}

	4、作业
		已知下列数列 (菲波那切数列)
		1,1,2,3,5,8,13,21,34,55,... ...
		已知 第一个数为1，第二个数为1
		从第三个数开始，每个数字等于前两个数之和

		问题：通过一个函数，求某个位置上的数字（用递归实现）









https://www.baidu.com/s?wd=%E4%BD%B3%E8%83%BD
https://www.baidu.com/s?wd=尼康