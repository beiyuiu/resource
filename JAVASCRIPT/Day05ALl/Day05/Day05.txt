while(i > 0){
	switch(i){
		case 1:
			console.log();
			break;
		case 2:
			console.log();
			continue; // 作用在 while
	}
}

switch(i){
	case 1:
		console.log();
		continue; // 错误
}

===================================================
1、循环结构
	1、do ... while()
		do{
			循环操作
		}while(循环条件);
		
		do...while  VS  while
		1、while
			先判断条件，再执行循环操作
			如果条件不满足，循环一次都不执行
		2、do ... while
			先执行循环操作，再判断循环条件
			即便条件不满足，也要执行一次循环操作
		练习：
			将猜数字的游戏，改版成 do ... while 循环版本
	2、for() 循环
		1、语法
			for(表达式1;表达式2;表达式3){
				//循环操作
			}
			表达式1：循环条件的声明
			表达式2：循环条件的判断(boolean)
			表达式3：更新循环条件(i++,... ...)

			执行过程：
				1、计算表达式1的值
				2、计算表达式2的值，如果结果为true则执行循环体，否则退出
				3、执行循环体
				4、执行表达式3
				5、再计算表达式2的值，为true执行循环体，否则退出
			while do...while 和 for 的使用场合：
			1、while 和 do...while
				适合使用在不确定循环次数的循环下
			2、for 
				适合使用在确定循环次数时使用

			练习：
				1、定义一个函数，打印乘法口诀表中的任一一行
					输入要打印的行数：5
					1*5=5 2*5=10 3*5=15 4*5=20 5*5=25
				2、定义一个函数，打印 1/1+1/3+1/5+...1/999的和
				3、定义一个函数，判断指定的数字是否为素数
					素数：只能被1 和 它本身整除的数字

					输入一个数字：7
					是素数

					循环条件：从 2 开始 ，到输入的数字-1结束
					循环操作：判断输入的数字能否被循环条件整除,能被整除，则不是素数，不能被整除，是素数

				
				4、有一对兔子，从出生后的第3个月起都生一对兔子，小兔子长到第3个月后每个月又生一对兔子，假如兔子都不死的话，打印输出 前10个月，每个月有多少对兔子
				n1  n2  n1  n2  n1  n2
				1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55
		2、三个表达式的特殊用法
			1、for(;;)
				三个表达式可以任意的省略，不推荐省略
			2、for 第一个 和 第三个表达式的多样化
				for(var i=1,j=2;i<=10;i++,j++)

			练习：
				1 + 6 = 7
				2 + 5 = 7
				3 + 4 = 7
				4 + 3 = 7
				5 + 2 = 7
				6 + 1 = 7

				for(var i=1,j=6;j>=1;i++,j--){
					console.log(i+"+"+j+"="+(i+j));
				}
	3、嵌套循环
		在一个循环的内部又出现一个循环
		for(var i=0;i<10;i++){ // 外层循环

			for(var j=0;j<10;j++){ // 内层循环
				
			}

		}

		外层循环执行一次，内层循环要执行一轮
		练习：
			1、控制台中输出下面的图形
				******
				******
				******
				******
				******

				*
				**
				***
				****
				*****

				   *
					***
				 *****
				*******
			 *********
2、数组
	1、什么是数组
		数组，即一组数据，使用一个变量来存放多个数据
		数组中的元素是按照"线性"书序来排列的，所以也可以称之为是一个 "线性表"
	2、声明数组
		1、声明一个空数组变量
			var 数组名 = [];
		2、声明数组并赋初始值
			var 数组名 = [数据1,数据2,数据3,... ...];
		3、声明一个空数组变量
			var 数组名 = new Array();
		4、声明一个数组并赋初始值
			var 数组名 = new Array(数据1,数据2,... ...);
		练习：
			1、创建一个函数，分别用两种不同的方式创建数组(arr1,arr2)
				arr1保存 ：张三丰，张翠山，张无忌
				arr2保存 ：金花婆婆，殷素素，赵敏
			2、直接将数组打印在控制台上
	3、数组是引用类型的对象
		引用类型的对象，是将数据保存在 "堆" 中的
		在"栈"中，会对 "堆" 中数据的地址进行引用
		1、将数组赋值给其它变量时，实际赋的是数组的地址
			练习：
				1、创建一个数组 arr1 ，包含"张无忌","赵敏"
				2、将 arr1 赋值给 arr2
				3、将 arr2 的第一个元素更改为 "金花婆婆"，打印输出 arr1 和 arr2 中的所有元素

		2、数组在做参数的时候，传递进去的实际上是地址(按引用传递 即 按地址传递)
			练习：
				1、创建一个数组array，保存"张无忌","赵敏"俩元素
				2、创建一个函数change，接收一个数组作为参数，在函数体内，将第一个元素更改为"金花婆婆"
				3、调用change函数，并将array数组作为参数，调用完成后，打印array的值，观察结果
				4、修改change函数，在函数体内，将传递进来的数组重新new一个Array("孙悟空","猪八戒")
				5、重复步骤三，观察结果
		3、null
			表示的是让引用类型的对象不再指向任何空间.一般用于主动释放对象的空间
			//让 array 指向数组的地址
			var array = ["wuji.zhang","zhaomin"];

			//释放 array空间，不再指向任何地址
			array = null;
	4、访问数组的元素
		赋值，取值，都是使用 下标 来完成的
		1、为数组的元素赋值
			数组名[下标] = 值;
			var array = ["张无忌","赵敏"];
			array[1] = "周芷若";
			array[2] = "小昭";//增加一个新元素，在第3个位置处
			array[5] = "灭绝师太";
		2、获取数组中的值
			数组名[下标];
		3、length属性
			作用：获取数组的长度(数组中元素的个数)
			1、允许将数组的length属性值设置为0，来完成数组元素的清空操作
			2、配合循环 做数组的循环遍历操作
				var array = ["张无忌","赵敏"];
				输出：
					第1名 ：张无忌
					第2名 ：赵敏
				for(var i=0;i<array.length;i++){
					console.log("第"+(i+1)+"名:"+array[i]);
				}
			3、配合着数组，找到最新元素要插入的位置
				var array = ["张无忌","赵敏"];
				array[array.length] = "金花婆婆";
作业：
	1、定义一个函数，找出一个整数数组中的最大值
		var nums = [38,5,62,789,12];
		该数组中的最大值为：789
		推荐步骤：
			1、声明函数 findMax，在函数体中，声明数组
			2、声明一个变量 max，保存该数组中的最大值，并且设置数组的第一个元素为 max 的默认值
			3、从第二个元素开始，依次与 max 进行比较，只要比max大，就赋值给max
	2、定义一个函数，查找指定元素的位置(下标)
		var nums = [38,5,62,789,12];

		用户输入：12
		该元素的下标为：4

		用户输入：6
		该元素不存在